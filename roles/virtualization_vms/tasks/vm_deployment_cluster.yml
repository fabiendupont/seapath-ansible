# Copyright (C) 2025 RTE
# SPDX-License-Identifier: Apache-2.0

---
# Cluster VM deployment (from deploy_vms_cluster role)

- name: Check presence of VM before deployment
  cluster_vm:
    command: status
    name: "{{ item }}"
  register: presencevm
  loop: "{{ groups['VMs'] | default([]) }}"

- name: Debug VM presence status
  debug:
    var: presencevm
    verbosity: 2

- name: Check tmp folder permission for VM disk uploads
  file:
    path: "{{ vm_disk_upload_folder }}"
    state: directory
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
    mode: '0755'
  when:
    - vm_disk_upload_folder is defined
    - vm_disk_upload_folder != "/tmp"

- name: Deploy VM in cluster
  block:
    - name: Copy system disk on target for {{ item }}
      copy:
        src: "{{ vm_file }}"
        dest: "{{ vm_file_dest }}"
      vars:
        ansible_remote_tmp: "{{ vm_disk_upload_folder | default(omit) }}"
      when: vm_disk_copy | bool

    - name: Create {{ item }} VM
      cluster_vm:
        name: "{{ item }}"
        command: create
        system_image: "{{ vm_file_dest }}"
        force: true
        live_migration: "{{ hostvars[item].live_migration | default(false) }}"
        migration_user: "{{ livemigration_user | default(omit) }}"
        migrate_to_timeout: "{{ hostvars[item].migrate_to_timeout | default(omit) }}"
        migration_downtime: "{{ hostvars[item].migration_downtime | default(omit) }}"
        priority: "{{ hostvars[item].priority | default(omit) }}"
        enable: "{{ hostvars[item].enable | default(true) }}"
        nostart: "{{ hostvars[item].nostart | default(false) }}"
        pinned_host: "{{ hostvars[item].pinned_host | default(omit) }}"
        preferred_host: "{{ hostvars[item].preferred_host | default(omit) }}"
        crm_config_cmd: "{{ hostvars[item].crm_config_cmd | default(omit) }}"
        xml: >-
          {{ lookup('file', hostvars[item].xml_path)
               if hostvars[item].xml_path is defined
             else lookup('template',hostvars[item].vm_template,template_vars=dict(vm=hostvars[item]))
               if hostvars[item].vm_template is defined
             else lookup('file',vm_disks_directory + '/' + item + '.xml')
             | replace('\n', '') }}

    - name: Remove temporary VM disk file
      file:
        path: "{{ vm_file_dest }}"
        state: absent

    - name: Wait for VM connections
      wait_for_connection:
      delegate_to: "{{ item }}"
      when:
        - hostvars[item].wait_for_connection is defined
        - hostvars[item].wait_for_connection

  loop: "{{ groups['VMs'] | default([]) }}"
  vars:
    vm_file: "{{ hostvars[item].vm_disk | default( vm_disks_directory ~ '/' ~ item ~ '.qcow2') }}"
    vm_file_dest: "{{ vm_disk_upload_folder + '/os.qcow2' }}"
  when: 
    - presencevm.results | selectattr('item', 'equalto', item) | map(attribute='status') | first == "Undefined"
    - or (hostvars[item].force is defined and hostvars[item].force)

- name: Define colocation constraints for VMs
  cluster_vm:
    name: "{{ item }}"
    command: define_colocation
    strong: "{{ hostvars[item].strong_colocation | default(false) }}"
    colocated_vms: "{{ hostvars[item].colocated_vms }}"
  loop: "{{ groups['VMs'] | default([]) }}"
  when: hostvars[item].colocated_vms is defined
